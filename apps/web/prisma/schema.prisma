datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String           @id @default(cuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    name           String?
    email          String?          @unique
    username       String?          @unique
    emailVerified  DateTime?        @default(now())
    bio            String?
    image          String?
    role           String?          @default("user")
    provider       String?
    Post           Post[]
    WritingSession WritingSession[]
    Writing        Writing[]
}

model WritingPath {
    id           String    @id @default(cuid())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @default(now())
    name         String
    type         String
    maxWordCount Int?
    Writing      Writing[]
}

model Waitlist {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    name       String
    email      String   @unique
    accessCode String   @unique
    position   Int      @unique
}

model Post {
    id        String    @id @default(cuid())
    title     String
    content   String    @db.MediumText
    published Boolean?  @default(false)
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
    wordCount Int
    slug      String
    shareId   String    @unique

    @@index([userId])
}

model Writing {
    id            String      @id @default(cuid())
    title         String
    content       String      @db.MediumText
    published     Boolean?    @default(false)
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime?   @default(now()) @updatedAt
    wordCount     Int
    maxWordCount  Int
    slug          String
    shareId       String      @unique
    writingPath   WritingPath @relation(fields: [writingPathId], references: [id])
    writingPathId String

    @@index([userId])
    @@index([writingPathId])
}

model WritingSession {
    id                String   @id @default(cuid())
    goal              String
    target            Int
    startingWordCount Int
    endingWordCount   Int
    result            Int
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt
    user              User     @relation(fields: [userId], references: [id])
    userId            String

    @@index([userId])
}
